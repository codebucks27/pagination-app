{"ast":null,"code":"var _jsxFileName = \"D:\\\\Open source\\\\pagination-app\\\\src\\\\components\\\\paginationComponent.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\n\nfunction PaginationComponent(_ref) {\n  _s();\n\n  let {\n    totalPages,\n    pageNumberLimit\n  } = _ref;\n  const [currentPage, setcurrentPage] = useState(1);\n  const [itemsPerPage, setitemsPerPage] = useState(5); //   const [pageNumberLimit, setpageNumberLimit] = useState(limit);\n\n  const [maxPageNumberLimit, setmaxPageNumberLimit] = useState(5);\n  const [minPageNumberLimit, setminPageNumberLimit] = useState(0);\n\n  const handleClick = event => {\n    setcurrentPage(Number(event.target.id));\n  };\n\n  const pages = [];\n\n  for (let i = 1; i <= totalPages; i++) {\n    pages.push(i);\n  }\n\n  const indexOfLastItem = currentPage * itemsPerPage;\n  const indexOfFirstItem = indexOfLastItem - itemsPerPage;\n  const renderPageNumbers = pages.map(number => {\n    if (number < maxPageNumberLimit + 1 && number > minPageNumberLimit) {\n      return /*#__PURE__*/React.createElement(\"li\", {\n        key: number,\n        id: number,\n        onClick: handleClick,\n        className: currentPage == number ? \"active\" : null,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 9\n        }\n      }, number);\n    } else {\n      return null;\n    }\n  });\n\n  const handleNextbtn = () => {\n    setcurrentPage(currentPage + 1);\n\n    if (currentPage + 1 > maxPageNumberLimit) {\n      setmaxPageNumberLimit(maxPageNumberLimit + pageNumberLimit);\n      setminPageNumberLimit(minPageNumberLimit + pageNumberLimit);\n    }\n  };\n\n  const handlePrevbtn = () => {\n    setcurrentPage(currentPage - 1);\n\n    if ((currentPage - 1) % pageNumberLimit == 0) {\n      setmaxPageNumberLimit(maxPageNumberLimit - pageNumberLimit);\n      setminPageNumberLimit(minPageNumberLimit - pageNumberLimit);\n    }\n  };\n\n  let pageIncrementBtn = null;\n\n  if (pages.length > maxPageNumberLimit) {\n    pageIncrementBtn = /*#__PURE__*/React.createElement(\"li\", {\n      onClick: handleNextbtn,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 24\n      }\n    }, \" \\u2026 \");\n  }\n\n  let pageDecrementBtn = null;\n\n  if (minPageNumberLimit >= 1) {\n    pageDecrementBtn = /*#__PURE__*/React.createElement(\"li\", {\n      onClick: handlePrevbtn,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 24\n      }\n    }, \" \\u2026 \");\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"button\", {\n    className: \"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\",\n    onClick: handlePrevbtn,\n    disabled: currentPage == pages[0] ? true : false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }\n  }, \"Prev\"), pageDecrementBtn, renderPageNumbers, pageIncrementBtn, /*#__PURE__*/React.createElement(\"button\", {\n    className: \"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\",\n    onClick: handleNextbtn,\n    disabled: currentPage == pages[pages.length - 1] ? true : false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 11\n    }\n  }, \"Next\"));\n}\n\n_s(PaginationComponent, \"QQVjiCkIDKHerFwpxgvXvF8Ctcs=\");\n\n_c = PaginationComponent;\nexport default PaginationComponent;\n\nvar _c;\n\n$RefreshReg$(_c, \"PaginationComponent\");","map":{"version":3,"names":["React","useEffect","useState","PaginationComponent","totalPages","pageNumberLimit","currentPage","setcurrentPage","itemsPerPage","setitemsPerPage","maxPageNumberLimit","setmaxPageNumberLimit","minPageNumberLimit","setminPageNumberLimit","handleClick","event","Number","target","id","pages","i","push","indexOfLastItem","indexOfFirstItem","renderPageNumbers","map","number","handleNextbtn","handlePrevbtn","pageIncrementBtn","length","pageDecrementBtn"],"sources":["D:/Open source/pagination-app/src/components/paginationComponent.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\n\r\nfunction PaginationComponent({totalPages, pageNumberLimit}) {\r\n\r\n  const [currentPage, setcurrentPage] = useState(1);\r\n  const [itemsPerPage, setitemsPerPage] = useState(5);\r\n\r\n//   const [pageNumberLimit, setpageNumberLimit] = useState(limit);\r\n  const [maxPageNumberLimit, setmaxPageNumberLimit] = useState(5);\r\n  const [minPageNumberLimit, setminPageNumberLimit] = useState(0);\r\n\r\n  const handleClick = (event) => {\r\n    setcurrentPage(Number(event.target.id));\r\n  };\r\n\r\n  \r\n\r\n\r\n  const pages = [];\r\n  for (let i = 1; i <= totalPages; i++) {\r\n    pages.push(i);\r\n  }\r\n\r\n  const indexOfLastItem = currentPage * itemsPerPage;\r\n  const indexOfFirstItem = indexOfLastItem - itemsPerPage;\r\n\r\n  const renderPageNumbers = pages.map((number) => {\r\n    if (number < maxPageNumberLimit + 1 && number > minPageNumberLimit) {\r\n      return (\r\n        <li\r\n          key={number}\r\n          id={number}\r\n          onClick={handleClick}\r\n          className={currentPage == number ? \"active\" : null}\r\n        >\r\n          {number}\r\n        </li>\r\n      );\r\n    } else {\r\n      return null;\r\n    }\r\n  });\r\n\r\n\r\n\r\n  const handleNextbtn = () => {\r\n    setcurrentPage(currentPage + 1);\r\n\r\n    if (currentPage + 1 > maxPageNumberLimit) {\r\n      setmaxPageNumberLimit(maxPageNumberLimit + pageNumberLimit);\r\n      setminPageNumberLimit(minPageNumberLimit + pageNumberLimit);\r\n    }\r\n  };\r\n\r\n  const handlePrevbtn = () => {\r\n    setcurrentPage(currentPage - 1);\r\n\r\n    if ((currentPage - 1) % pageNumberLimit == 0) {\r\n      setmaxPageNumberLimit(maxPageNumberLimit - pageNumberLimit);\r\n      setminPageNumberLimit(minPageNumberLimit - pageNumberLimit);\r\n    }\r\n  };\r\n\r\n  let pageIncrementBtn = null;\r\n  if (pages.length > maxPageNumberLimit) {\r\n    pageIncrementBtn = <li onClick={handleNextbtn}> &hellip; </li>;\r\n  }\r\n\r\n  let pageDecrementBtn = null;\r\n  if (minPageNumberLimit >= 1) {\r\n    pageDecrementBtn = <li onClick={handlePrevbtn}> &hellip; </li>;\r\n  }\r\n\r\n\r\n\r\n  return (\r\n    <>\r\n      {/* <ul className=\"pageNumbers\">\r\n        <li>\r\n          <button\r\n            onClick={handlePrevbtn}\r\n            disabled={currentPage == pages[0] ? true : false}\r\n          >\r\n            Prev\r\n          </button>\r\n        </li>\r\n        {pageDecrementBtn}\r\n        {renderPageNumbers}\r\n        {pageIncrementBtn}\r\n\r\n        <li>\r\n          <button\r\n            onClick={handleNextbtn}\r\n            disabled={currentPage == pages[pages.length - 1] ? true : false}\r\n          >\r\n            Next\r\n          </button>\r\n        </li>\r\n      </ul> */}\r\n\r\n\r\n      <button className='bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded' \r\n onClick={handlePrevbtn}\r\n            disabled={currentPage == pages[0] ? true : false}\r\n            >\r\n            Prev\r\n          </button>\r\n          {pageDecrementBtn}\r\n        {renderPageNumbers}\r\n        {pageIncrementBtn}\r\n          <button className='bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded'\r\nonClick={handleNextbtn}\r\n            disabled={currentPage == pages[pages.length - 1] ? true : false}\r\n            >\r\n            Next \r\n          </button>\r\n    \r\n    </>\r\n  );\r\n}\r\n\r\nexport default PaginationComponent;"],"mappings":"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"},"metadata":{},"sourceType":"module"}